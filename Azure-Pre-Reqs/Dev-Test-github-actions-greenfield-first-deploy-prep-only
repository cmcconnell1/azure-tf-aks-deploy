#!/usr/bin/env bash

# This Azure CLI script helps prepare everything we need to run Terraform in GitHub Actions. 
# It only needs to be run once for each distinct environment--i.e.: develop, test, stage, prod

# This script does the following:
    # Creates the storage account and container to store Terraform state remotely.
    # Creates a Service Principal and then assigns contributor at tenant root. 
    # Note: we should reduce the scope for our deployments down to single Subscriptions (and therefore environments--for many reasons)
    # One main reason is the broken paradym of terraform handling multiple enviroments natively and requisite remote env-specific state-file & locking, etc.
az login

########################################
# UPDATE THESE ENV-SPECIFIC VARS
########################################
# Update the the ENV                                            # should have separate scripts for all envs: "develop, "test" "stage" note that "production" in sep tenant.
export MY_ENV="devtest"                                         # this is actually a shared tenant is actually Dev / Test. but will create and deploy the AKS infra for the test env.
export SUBSCRIPTION_ID="xxxxxxxxxxxxxxx"   # the ID of the Subscription to deploy the Resource Group and Storage Account into. 

########################################
export MY_RANDOM="${RANDOM}"
export LOCATION="westus"                                        # the Resource Group and Storage Account LOCATION.
export RESOURCE_GROUP="${MY_ENV}devops"                            # the Resource Group name the Storage Account will be deployed into.
export STORAGE_ACCOUNT_NAME="${MY_ENV}devops${MY_RANDOM}"   # the Storage Account name - note this must be unique!
export CONTAINER_NAME="${MY_ENV}devopstfstate"              # the Container name.
export ENV_TAG="environment=${MY_ENV}devops"                # the Environment Tag applied to the Resource Group and Storage Account.
export SP_NAME="${MY_ENV}devops"                            # the Service Principal Name
export AZURE_KEY_VAULT_NAME="${MY_ENV}devops"               # the azure keyvault to store the SERVICE_PRINCIPAL secrets into.
########################################

export DATE_TAG=$(date "+%Y.%m.%d.%H.%M.%S")

# Creates Resource Group and Storage Account for TF State File Storage
az account set -s $SUBSCRIPTION_ID
az group create --location $LOCATION --name $RESOURCE_GROUP --tags $ENV_TAG
az storage account create --location $LOCATION --resource-group $RESOURCE_GROUP --name $STORAGE_ACCOUNT_NAME --tags $ENV_TAG --https-only --sku Standard_LRS --encryption-services blob --subscription $SUBSCRIPTION_ID
export STORAGE_ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT_NAME --query '[0].value' -o tsv)
az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY

# create the requisite azure key vault for the $MY_ENV-devops
az keyvault create --name "$AZURE_KEY_VAULT_NAME" --resource-group "$RESOURCE_GROUP" --location "$LOCATION"
az keyvault update --name "$AZURE_KEY_VAULT_NAME" --resource-group "$RESOURCE_GROUP" --enabled-for-deployment "true"
# grant the role assignment provides ability to list key vault objects in key vault
az role assignment create --role "Key Vault Reader" --assignee $SERVICE_PRINCIPAL_CLIENT_ID --scope /subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${RESOURCE_GROUP}

# Creates Service Principal for TF to use and gives root Contributor access. 
# we keep this file to get sensitive credentials from it -- it should not be checked into git.
#SERVICE_PRINCIPAL=$(az ad sp create-for-rbac --role Contributor -n $SP_NAME --sdk-auth)
export SERVICE_PRINCIPAL=$(az ad sp create-for-rbac --role Owner -n $SP_NAME --sdk-auth | tee "./secrets/$MY_ENV-service_principal.json")

# fetch var and create secrets
export SERVICE_PRINCIPAL_CLIENT_ID=$(cat "./secrets/$MY_ENV-service_principal.json" | grep 'clientId' | awk -F ":" '{print $2}' | sed 's/,//g; s/"//g')
az keyvault secret set --vault-name $AZURE_KEY_VAULT_NAME --name "$MY_ENV-service-principal-client-id" --value $SERVICE_PRINCIPAL_CLIENT_ID --encoding ascii
# update Azure Key Vault to allow our Service Principal to be used for deployment and to be able to retrieve secrets from Key Vault
az keyvault set-policy --name "$AZURE_KEY_VAULT_NAME" --spn $SERVICE_PRINCIPAL_CLIENT_ID --secret-permissions list get #set delete

export SERVICE_PRINCIPAL_CLIENT_SECRET=$(cat "./secrets/$MY_ENV-service_principal.json" | grep 'clientSecret' | awk -F ":" '{print $2}' | sed 's/,//g; s/"//g')
az keyvault secret set --vault-name $AZURE_KEY_VAULT_NAME --name "$MY_ENV-service-principal-client-secret" --value $SERVICE_PRINCIPAL_CLIENT_SECRET --encoding ascii

export SERVICE_PRINCIPAL_TENANT_ID=$(cat "./secrets/$MY_ENV-service_principal.json" | grep 'tenantId' | awk -F ":" '{print $2}' | sed 's/,//g; s/"//g')
az keyvault secret set --vault-name $AZURE_KEY_VAULT_NAME --name "$MY_ENV-service-principal-tenant-id" --value $SERVICE_PRINCIPAL_TENANT_ID --encoding ascii

export SERVICE_PRINCIPAL_SUBSCRIPTION_ID=$(cat "./secrets/$MY_ENV-service_principal.json" | grep 'subscriptionId' | awk -F ":" '{print $2}' | sed 's/,//g; s/"//g')
az keyvault secret set --vault-name $AZURE_KEY_VAULT_NAME --name "$MY_ENV-service-principal-subscription-id" --value $SERVICE_PRINCIPAL_SUBSCRIPTION_ID --encoding ascii

# create the contributor role
#az role assignment create --role 'Owner' --assignee $SERVICE_PRINCIPAL_CLIENT_ID --scope "/"
az role assignment create --role 'Owner' --assignee $SERVICE_PRINCIPAL_CLIENT_ID --scope "/subscriptions/${SUBSCRIPTION_ID}"

# gitignore will not add files in the ./secrets dir
#rm -fr "./secrets/$MY_ENV-service_principal.json"
echo "fetch newly created azure key vault secrets:"
for AZURE_KEY_VAULT_SECRET in "$MY_ENV-service-principal-client-id" "$MY_ENV-service-principal-client-secret" "$MY_ENV-service-principal-tenant-id" "$MY_ENV-service-principal-subscription-id" ; do
    echo
    echo "$AZURE_KEY_VAULT_SECRET:"
    az keyvault secret show --name $AZURE_KEY_VAULT_SECRET --vault-name $AZURE_KEY_VAULT_NAME --query "value"
done

########################################
# create our deployment vars file for validate and fetching secrets from the key vault--we need these for github secrets and terraform provider config
OUTPUT_VARS_FILE="./Azure-Pre-Reqs/${MY_ENV}githubactions-vars"
printf "Update the the ENV deploy file for later reference to help us fetch resources, etc."
printf "DATE_TAG:$DATE_TAG\n" > "${OUTPUT_VARS_FILE}"
printf "ENV:$MY_ENV\n" >> "${OUTPUT_VARS_FILE}" 
printf "SUBSCRIPTION_ID:$SUBSCRIPTION_ID\n" >> "${OUTPUT_VARS_FILE}"
printf "MY_RANDOM:$MY_RANDOM\n" >> "${OUTPUT_VARS_FILE}"
printf "LOCATION:$LOCATION\n" >> "${OUTPUT_VARS_FILE}"
printf "RESOURCE_GROUP:$RESOURCE_GROUP\n" >> "${OUTPUT_VARS_FILE}"
printf "STORAGE_ACCOUNT_NAME:$STORAGE_ACCOUNT_NAME\n" >> "${OUTPUT_VARS_FILE}"
printf "CONTAINER_NAME:$CONTAINER_NAME\n" >> "${OUTPUT_VARS_FILE}"
printf "ENV_TAG:$ENV_TAG\n" >> "${OUTPUT_VARS_FILE}"
printf "SP_NAME:$SP_NAME\n" >> "${OUTPUT_VARS_FILE}"
printf "AZURE_KEY_VAULT_NAME:$AZURE_KEY_VAULT_NAME\n" >> "${OUTPUT_VARS_FILE}"

echo
########################################
# Information to setup GitHub Secrets and Terraform backend configuration is output by the script below. 
########################################
echo "

#########################
Terraform Backend config:
Azure storage account details that we must add to the Terraform Backend Configuration--these go into the providers.tf file:
Resource Group: $RESOURCE_GROUP
Storage Account: $STORAGE_ACCOUNT_NAME
Container Name: $CONTAINER_NAME

i.e.:  where XXXX is the required GLOBALLY unique storage_account_name--we ensure this using \$RANDOM
  backend "azurerm" {
      resource_group_name  = "${MY_ENV}devops"
      storage_account_name = "${MY_ENV}devops${MY_RANDOM}" 
      container_name       = "${MY_ENV}devopstfstate"
      key                  = "terraform.tfstate"
  }

##########################
Gitub Repo Secrets config: Azure Service Principal secrets we must add to the GitHub Repo Secrets:
ARM_CLIENT_ID: $SERVICE_PRINCIPAL_CLIENT_ID
ARM_CLIENT_SECRET: $SERVICE_PRINCIPAL_CLIENT_SECRET
ARM_TENANT_ID: $SERVICE_PRINCIPAL_TENANT_ID
ARM_SUBSCRIPTION_ID: $SERVICE_PRINCIPAL_SUBSCRIPTION_ID
"
echo
